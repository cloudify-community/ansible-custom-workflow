tosca_definitions_version: cloudify_dsl_1_3

description: >
  This blueprint creates deploys NGINX on AWS using Terraform.

imports:
  - http://cloudify.co/spec/cloudify/6.3.0/types.yaml
  - plugin:cloudify-terraform-plugin
  - plugin:cloudify-ansible-plugin
  - plugin:cloudify-utilities-plugin?version= >=1.22.1

inputs:

  aws_region_name:
    type: string
    display_label: AWS Region
    default: us-west-1
    constraints:
      - valid_values:
        - us-east-1
        - us-west-1
        - ca-central-1
        - eu-west-1

  aws_zone_name:
    type: string
    display_label: AWS Availability Zone
    default: { concat: [ { get_input: aws_region_name }, 'a' ] }

node_templates:

  terraform:
    type: cloudify.nodes.terraform

  network:
    type: cloudify.nodes.terraform.Module
    properties:
      resource_config:
        source:
          location: https://github.com/cloudify-community/ansible-custom-workflow/archive/refs/heads/master.zip
        source_path: terraform/aws/network/
        variables:
          access_key: { get_secret: aws_access_key_id }
          secret_key: { get_secret: aws_secret_access_key }
          aws_region: { get_input: aws_region_name }
          aws_zone: { get_input: aws_zone_name }  
    relationships:
      - target: terraform
        type: cloudify.terraform.relationships.run_on_host

  vm:
    type: cloudify.nodes.terraform.Module
    properties:
      resource_config:
        source:
          location: https://github.com/cloudify-community/ansible-custom-workflow/archive/refs/heads/master.zip
        source_path: terraform/aws/network/vm
        variables:
          access_key: { get_secret: aws_access_key_id }
          secret_key: { get_secret: aws_secret_access_key }
          aws_region: { get_input: aws_region_name }
          admin_user: centos
          admin_key_public: { get_attribute: [agent_key, public_key_export] }
          instance_type: t2.micro
          security_group_id: { get_attribute: [ network, outputs, security_group_id, value ] }
          subnet_id: { get_attribute: [ network, outputs, subnet_id, value ] }
    interfaces:
      cloudify.interfaces.lifecycle:
        poststart:
          implementation: ansible.cloudify_ansible.tasks.run
          inputs:
            playbook_path: playbooks/install_nginx.yaml
            sources:
              web_servers:
                hosts:
                  webserver:
                       ansible_host: { get_attribute: [ SELF, outputs, instance_ip, value ] }
                       ansible_user: centos
                       ansible_ssh_private_key_file: { get_attribute: [ agent_key, private_key_export ] }
                       ansible_become: true
                       ansible_ssh_common_args: '-o StrictHostKeyChecking=no'                    
      custom_actions:
        patch_server:
          implementation: ansible.cloudify_ansible.tasks.run
          inputs:
            playbook_path: playbooks/patch_server.yaml
            sources: { get_attribute: [ SELF, sources ] }
    relationships:
      - target: terraform
        type: cloudify.terraform.relationships.run_on_host
      - target: network
        type: cloudify.relationships.depends_on
      - target: agent_key
        type: cloudify.relationships.depends_on

  agent_key:
    type: cloudify.keys.nodes.RSAKey
    properties:
      resource_config:
        key_name: agent_key
        openssh_format: true
      use_secret_store: true
      use_secrets_if_exist: true
    interfaces:
      cloudify.interfaces.lifecycle:
        create:
          implementation: keys.cloudify_ssh_key.operations.create
          inputs:
            store_private_key_material: true

workflows:
  PatchServer:
    mapping: cloudify_custom_workflow.cloudify_custom_workflow.tasks.customwf
    parameters:
      nodes_to_runon:
        default:
          - vm
      operations_to_execute:
        default:
          - custom_actions.patch_server

capabilities:

  instance_id:
    description: The EC2 instance ID
    value: { get_attributes_list: [ vm, outputs, instance_id, value ] }

  endpoint:
    description: The external endpoint of the application.
    value: { get_attributes_list: [ vm, outputs, instance_ip, value ] }

  user:
    description: user ID.
    value: centos

  key_content:
    description: Private agent key
    value: { get_attribute: [agent_key, private_key_export] }
